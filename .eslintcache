[{"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/index.js":"1","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page1.js":"2","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page2.js":"3","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page3.js":"4","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/test.jsx":"5","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/testcircle.jsx":"6","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/Rectangle.js":"7","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/trash.js":"8","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/info.js":"9","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/Circle.js":"10","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/test_original.jsx":"11"},{"size":772,"mtime":1609209964186,"results":"12","hashOfConfig":"13"},{"size":387,"mtime":1609141505136,"results":"14","hashOfConfig":"13"},{"size":1316,"mtime":1609172383910,"results":"15","hashOfConfig":"13"},{"size":1943,"mtime":1609171924402,"results":"16","hashOfConfig":"13"},{"size":11659,"mtime":1609208607432,"results":"17","hashOfConfig":"13"},{"size":2698,"mtime":1609240861322,"results":"18","hashOfConfig":"13"},{"size":3392,"mtime":1609141505136,"results":"19","hashOfConfig":"13"},{"size":735,"mtime":1609141505134,"results":"20","hashOfConfig":"13"},{"size":568,"mtime":1609119974448,"results":"21","hashOfConfig":"13"},{"size":2777,"mtime":1609208607432,"results":"22","hashOfConfig":"13"},{"size":2776,"mtime":1609240863018,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1xnsydz",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":3,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/index.js",[],["50","51"],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page1.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page2.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/Page3.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/test.jsx",["52","53","54","55","56","57"],"import React, { useState } from 'react';\nimport { Container, Form, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport { v4 } from 'uuid';\nimport Trash from './components/trash.js';\nimport Info from './components/info.js';\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport logo from './images/logo.png'; \nimport Rectangle from './components/Rectangle.js';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './style.css';\n\n\nconst rect1 = [\n    { id: v4(), intext: 'first rectangle'},\n\n  ];\nconst rect2 = [\n{ id: v4(), intext: 'second rectangle'},\n\n];\nconst rect3 = [\n{ id: v4(), intext: 'third rectangle'},\n\n];\nconst rect4 = [\n{ id: v4(), intext: 'forth rectangle'},\n\n];\n  \nconst rectangleColumns = {\n    [v4()]: {\n        heading1: \"What the world\",\n        heading2: \"NEEDS\",\n        color: '#E1E5FF',\n        headingColor: '#283972',\n        items: rect1\n    },\n    [v4()]: {\n        heading1: \"What you\",\n        heading2: \"LOVE\",\n        color: '#CCFFF0',\n        headingColor: '#009F6F',\n        items: rect2\n    },\n    [v4()]: {\n        heading1: \"What you are\",\n        heading2: \"GOOD AT\",\n        color: '#FFE4E4',\n        headingColor: '#FF5B5B',\n        items: rect3\n    },\n    [v4()]: {\n        heading1: \"What You Can Be\",\n        heading2: \"PAID FOR\",\n        color: '#FFFCCC',\n        headingColor: '#E5C908',\n        items: rect4\n    }\n    };\n\n    const initialNotes = ['sadasd'];\n\n    const [notes, setNote] = React.useState(initialNotes);\n    const [text, setText] = React.useState('');\n\n    const [isShown, setIsShown] = useState(false);\n\n\n    function handleChange(event) {\n        setText(event.target.value);\n      }\n\n    function handleAdd() {\n        if (!text){\n            return;\n        }\n        const newList = notes.concat({ intext: text, id: v4()});\n        setNote(newList);\n     \n        setText('');\n    }\n\n\n    function Note(column) {\n        return (\n        <div \n            variant = 'light' \n            className='rounded-pill' \n            onMouseEnter={() => setIsShown(true)}\n            onMouseLeave={() => setIsShown(false)}\n        >\n            {column.intext}\n            {isShown && (\n                <div className=\"btn-delete-container\" onClick={() => column.deleteNote(column.id)}>\n                    <Trash />\n                </div>\n            )}\n        </div>\n        )\n    }\n\n    const deleteNote = (id) => {\n        setNote(notes.filter((note) => note.id !== id))\n    }\n\n    const handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n          if (!text){\n            return;\n        }\n\n        const newList = notes.concat({ intext: text, id: v4()});\n        setNote(newList);\n     \n        setText('');\n        }\n    }\n\nconst handleDragEnd = (result, columns, setColumns) => {\n    console.log(result);\n    if (!result.destination) return;\n    const { source, destination } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n        const sourceColumn = columns[source.droppableId];\n        const destColumn = columns[destination.droppableId];\n        const sourceItems = [...sourceColumn.items];\n        const destItems = [...destColumn.items];\n        const [removed] = sourceItems.splice(source.index, 1);\n        destItems.splice(destination.index, 0, removed);\n        setColumns({\n        ...columns,\n        [source.droppableId]: {\n            ...sourceColumn,\n            items: sourceItems\n        },\n        [destination.droppableId]: {\n            ...destColumn,\n            items: destItems\n        }\n    });\n\n    } else {\n        const column = columns[source.droppableId];\n        const copiedItems = [...column.items];\n        const [removed] = copiedItems.splice(source.index, 1);\n        copiedItems.splice(destination.index, 0, removed);\n        setColumns({\n        ...columns,\n        [source.droppableId]: {\n            ...column,\n            items: copiedItems\n        }\n        });\n    }\n};\n\nconst Far = ()=> {\nconst [columns, setColumns] = useState(rectangleColumns);\n\nreturn (\n    <>\n        <DragDropContext\n            onDragEnd={(result) => handleDragEnd(result, columns, setColumns)}\n        >\n            {Object.entries(columns).map(([columnId, column], index) => {\n                return (\n                    <div key={columnId}>\n                        <div className=\"container\">\n                            <div className=\"rectangle-container text-center\" style = {{background: column.color}}>\n                                <h3 className=\"dark-blue\" style = {{color: column.headingColor}}>\n                                    {column.heading1}<br></br><strong>{column.heading2}</strong>\n                                    <OverlayTrigger\n                                        key=\"bottom\"\n                                        placement=\"bottom\"\n                                        overlay={\n                                            <Tooltip id={`tooltip-bottom`}>\n                                                <strong> What The World Needs</strong> <br /> Are you helping to solve an actual problem? <br /> Is what youâ€™re doing bringing beauty or utility to others, helping out, and shaping the world around you?\n                                            </Tooltip>\n                                        }\n                                    >\n                                        <span>\n                                            <Info />\n                                        </span>\n                                    </OverlayTrigger>\n                                </h3>\n                                <Droppable droppableId={columnId} key={columnId}>\n                                    {(provided, snapshot) => {\n                                        return (\n                                            <div\n                                                {...provided.droppablecolumn}\n                                                ref={provided.innerRef}\n                                                style={{\n                                                background: snapshot.isDraggingOver\n                                                    ? column.backgroundColor\n                                                    : \"lightgreen\",\n                                                }}\n                                            >\n                                                <div>\n                                                    <Container className=\"pill-container\">\n                                                        {column.items.map((item, index) => {\n                                                            return (\n                                                                <Draggable\n                                                                    key={item.id}\n                                                                    draggableId={item.id}\n                                                                    index={index}\n                                                                >\n                                                                    {(provided, snapshot) => {\n                                                                        return (\n                                                                            <div\n                                                                                ref={provided.innerRef}\n                                                                                {...provided.draggablecolumn}\n                                                                                {...provided.dragHandlecolumn}\n                                                                                style={{\n                                                                                userSelect: \"none\",\n                                                                                backgroundColor: snapshot.isDragging\n                                                                                    ? \"#263B4A\"\n                                                                                    : \"#456C86\",\n                                                                                color: \"white\",\n                                                                                ...provided.draggablecolumn.style\n                                                                                }}\n                                                                            >\n                                                                                <Note key={item.id} intext={item.intext} id={item.id} deleteNote={deleteNote}></Note>\n                                                                            <Container>\n                                                                            <Form.Control className='form rounded-pill' value={text} onChange={handleChange} onBlur={handleAdd} onKeyPress={handleKeyPress} placeholder=\"Type here...\"/>\n                                                                            </Container>\n                                                                            </div>\n                                                                        );\n                                                                    }}\n                                                                </Draggable>\n                                                            );\n                                                        })}\n                                                        {provided.placeholder}\n                                                    </Container>\n                                                </div>\n                                            </div>\n                                        );\n                                    }}\n                                </Droppable>\n                            </div>\n                        </div>\n                    </div>\n                );\n            })}\n        </DragDropContext>\n    </>\n)}\n\nexport default Far;\n\n    {/* return ( \n        <>  \n        <DragDropContext\n        onDragEnd={(result) => handleDragEnd(result, columns, setColumns)}>\n            <div className = \"main-header-text\">\n                <p>Letâ€™s find our ikigai! <br /> <br /> Start by adding activites or values you are currently doing into each of these four quadrants.\n                <br /> Feel free to add as many as you can think of!\n                </p> \n            </div>\n            <div className=\"main-logo\">\n                <img src={logo} alt=\"cs-logo\" />\n            </div>\n\n            {Object.entries(rectangleColumns).map(([columnId, column], index) => {\n                return(\n                <Droppable droppableId={columnId} key={columnId}>\n                {(provided, snapshot) => {\n\n                return (\n                    <div {...provided.droppablecolumn}\n                    ref={provided.innerRef}\n                    \n                    key = {columnId} >\n                    <Rectangle \n                    \n                    heading1 = {column.heading1}\n                    heading2 = {column.heading2}\n                    color = {column.color} \n                    headingColor = {column.headingColor}\n                    items = {column.items}\n                    provided = {provided}\n                    snapshot = {snapshot}/>\n                    {provided.placeholder}\n                    </div>\n                    )\n                }\n            }\n            </Droppable>\n            )\n            })\n            }\n\n        </DragDropContext>\n        </>\n    ); */}\n\n \n",["58","59"],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/testcircle.jsx",["60","61","62","63","64"],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/Rectangle.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/trash.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/info.js",[],"/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/components/Circle.js",["65","66","67"],"import React, { useState } from 'react';\nimport { Container, Form, OverlayTrigger, Tooltip} from 'react-bootstrap';\nimport { v4 } from 'uuid';\nimport Trash from '../components/trash.js';\nimport Info from '../components/info.js';\n\nconst initialNotes = [\n    {intext : 'hello i am a first note', id: v4()},\n]\n\nconst Circle = (props)=> {\n    const [notes, setNote] = React.useState(initialNotes);\n    const [text, setText] = React.useState('');\n\n    const [isShown, setIsShown] = useState(false);\n\n    function handleChange(event) {\n        setText(event.target.value);\n    }\n\n    function handleAdd(event) {\n        if (!text){\n            return;\n        }\n        const newList = notes.concat({ intext: text, id: v4()});\n        setNote(newList);\n     \n        setText('');\n    }\n\n\n    function Note(props) {\n        return (\n        <div \n            variant = 'light'\n            className='circle rounded-pill with-btn-delete' \n            onMouseEnter={() => setIsShown(true)}\n            onMouseLeave={() => setIsShown(false)}\n        >\n            <span className=\"intext\">\n                {props.intext}\n            </span>\n            {isShown && (\n                <span className=\"btn-delete-container\" onClick={() => props.deleteNote(props.id)}>\n                    <Trash />\n                </span>\n            )}\n        </div>\n        )\n    }\n\n\n    const deleteNote = (id) => {\n        setNote(notes.filter((note) => note.id !== id))\n    }\n\n    const handleKeyPress = (event) => {\n        if(event.key === 'Enter'){\n          if (!text){\n            return;\n        }\n\n        const newList = notes.concat({ intext: text, id: v4()});\n        setNote(newList);\n     \n        setText('');\n        }\n    }\n    \n    return ( \n        <>\n            <div className={props.id}>\n                <div className=\"circle-container\" style={{border: props.border}}>\n                    <span className=\"title-container\" style={{color: props.headingColor}}>\n                        {props.heading1}<br></br><strong>{props.heading2}</strong>\n                    </span>\n                    \n                    <div className=\"pills-location\">\n                        <Container className=\"pill-container\">\n                            {notes.map((element) => <Note key={element.id.toString()} intext={element.intext} id={element.id} deleteNote={deleteNote}></Note>)}\n                        </Container>\n\n                        <Container>\n                            <Form.Control className='form rounded-pill' value={text} onChange={handleChange} onBlur={handleAdd} onKeyPress={handleKeyPress} placeholder=\"Type here...\"/>\n                        </Container>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n \nexport default Circle; ","/Users/bearosarisupanga/Documents/GitHub/Ikigai/src/test_original.jsx",["68","69","70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":7,"column":8,"nodeType":"78","messageId":"79","endLine":7,"endColumn":12},{"ruleId":"76","severity":1,"message":"80","line":8,"column":8,"nodeType":"78","messageId":"79","endLine":8,"endColumn":17},{"ruleId":"81","severity":2,"message":"82","line":64,"column":30,"nodeType":"83","endLine":64,"endColumn":44},{"ruleId":"81","severity":2,"message":"82","line":65,"column":29,"nodeType":"83","endLine":65,"endColumn":43},{"ruleId":"81","severity":2,"message":"84","line":67,"column":35,"nodeType":"78","endLine":67,"endColumn":43},{"ruleId":"85","severity":1,"message":"86","line":252,"column":5,"nodeType":"87","messageId":"88","endLine":296,"endColumn":11},{"ruleId":"72","replacedBy":"89"},{"ruleId":"74","replacedBy":"90"},{"ruleId":"76","severity":1,"message":"91","line":2,"column":10,"nodeType":"78","messageId":"79","endLine":2,"endColumn":14},{"ruleId":"76","severity":1,"message":"92","line":11,"column":7,"nodeType":"78","messageId":"79","endLine":11,"endColumn":11},{"ruleId":"76","severity":1,"message":"93","line":15,"column":7,"nodeType":"78","messageId":"79","endLine":15,"endColumn":11},{"ruleId":"76","severity":1,"message":"94","line":19,"column":7,"nodeType":"78","messageId":"79","endLine":19,"endColumn":11},{"ruleId":"76","severity":1,"message":"95","line":23,"column":7,"nodeType":"78","messageId":"79","endLine":23,"endColumn":11},{"ruleId":"76","severity":1,"message":"96","line":2,"column":27,"nodeType":"78","messageId":"79","endLine":2,"endColumn":41},{"ruleId":"76","severity":1,"message":"97","line":2,"column":43,"nodeType":"78","messageId":"79","endLine":2,"endColumn":50},{"ruleId":"76","severity":1,"message":"98","line":5,"column":8,"nodeType":"78","messageId":"79","endLine":5,"endColumn":12},{"ruleId":"76","severity":1,"message":"99","line":12,"column":7,"nodeType":"78","messageId":"79","endLine":12,"endColumn":12},{"ruleId":"76","severity":1,"message":"100","line":16,"column":7,"nodeType":"78","messageId":"79","endLine":16,"endColumn":12},{"ruleId":"76","severity":1,"message":"101","line":20,"column":7,"nodeType":"78","messageId":"79","endLine":20,"endColumn":12},{"ruleId":"76","severity":1,"message":"102","line":24,"column":7,"nodeType":"78","messageId":"79","endLine":24,"endColumn":12},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Rectangle' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"React.useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","MemberExpression","React Hook \"useState\" cannot be called at the top level. React Hooks must be called in a React function component or a custom React Hook function.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["103"],["104"],"'Link' is defined but never used.","'cir1' is assigned a value but never used.","'cir2' is assigned a value but never used.","'cir3' is assigned a value but never used.","'cir4' is assigned a value but never used.","'OverlayTrigger' is defined but never used.","'Tooltip' is defined but never used.","'Info' is defined but never used.","'rect1' is assigned a value but never used.","'rect2' is assigned a value but never used.","'rect3' is assigned a value but never used.","'rect4' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]